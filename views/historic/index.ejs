<%- include ../partials/header.ejs %>
<%- include ../partials/sidebar.ejs %>
<!-- TODO change to bower -->
<script src="https://cdn.plot.ly/plotly-1.8.0.min.js"></script>
<script type="text/javascript" src="/moment/min/moment.min.js"></script>


<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.5.1/js/dataTables.buttons.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.5.1/js/buttons.colVis.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.5.1/js/buttons.flash.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.5.1/js/buttons.html5.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.5.1/js/buttons.print.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/buttons/1.5.1/css/buttons.dataTables.min.css">




<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />



<body class="pl-0 pr-0 bg-light">
  <main class="col-lg-9 ml-lg-auto col-lg-10 px-4">
    <hr>
    <div class="ml-0 mr-0">
      <div id="daterange" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc;">
        <i class="fa fa-calendar"></i>&nbsp;
        <span></span> <i class="fa fa-caret-down"></i>
      </div>
    </div>
    <hr>
    <div class="ml-0 mr-0">
      <div class="row border" style="background-color: white;">
        <div class="col-10 pr-0">
          <div id="graph" ></div>

        </div>
        <div class="col-2">
          <!-- <div class="cards-container">
            <div class="card-deck mb-4 text-center">
              <div class="card mb-4 box-shadow">
                <div class="card-header card-connected">
                  <h4 class="my-0 font-weight-normal">
                  Connected
                </h4>
                </div>
                <div class="card-body card-connected">
                  <h1 class="card-title pricing-card-title">
                  </small>
                </h1>
                </div>
              </div>
            </div>
          </div> -->

        </div>
      </div>
      <hr>
      <div class="row">
        <table id="data_table" class="table table-striped table-bordered nowrap" style="width:100%">
          <thead>
            <tr>
                <th>timestamp</th>
                <th>Date</th>
                <th>Device Id</th>
                <th>Total Carbon (ug)</th>
                <th>Max Temperature (decC)</th>
                <th>Baseline (ppm)</th>
                <th>ID</th>
            </tr>
          </thead>
        </table>
      </div>

    </div>

  </main>
</body>


<script type="text/javascript">
var graphDiv = document.getElementById('graph');

var x_start, x_end;

var dataTable;

var start_date = moment().subtract(29, 'days');
var end_date  = moment();


// $.getJSON("historic/data?from="+start_date.format('YYYY-MM-DD')+"&to="+end_date.format('YYYY-MM-DD'), function(jsonData){
//   dataTable = getDataTable(jsonData);
//   setDataGraph(formatData(jsonData));
// });

getData(start_date.format('YYYY-MM-DD'), end_date.format('YYYY-MM-DD'), function(jsonData) {
  dataTable = getDataTable(jsonData);
  setDataGraph(formatData(jsonData));
});



function cb(start, end) {
    $('#daterange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
}
$('#daterange').daterangepicker({
    startDate: start_date,
    endDate: end_date,
    ranges: {
       'Today': [moment(), moment()],
       'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
       'Last 7 Days': [moment().subtract(6, 'days'), moment()],
       'Last 30 Days': [moment().subtract(29, 'days'), moment()],
       'This Month': [moment().startOf('month'), moment().endOf('month')],
       'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
    }
}, cb);
cb(start_date, end_date);

$('#daterange').on('apply.daterangepicker', function(ev, picker) {
  start = picker.startDate.format('YYYY-MM-DD');
  end = picker.endDate.format('YYYY-MM-DD');
  getData(start, end, function(data){
    setDataGraph(formatData(data));
    dataTable = getDataTable(data);
  });
  //
  // update = getData(start, end);
  // data = getData(start, end);


});


function getDataTable(data) {
  return $('#data_table').DataTable( {
    destroy: true,
    data: data.rows,
    columns: [
        { data: 'timestamp', visible: false},
        { data: 'timestamp', target: 1 ,render: function(data){return moment(data).format('MMMM Do YYYY, h:mm:ss a')}},
        { data: 'deviceId' },
        { data: 'total_carbon', render: function(data){return data.toFixed(2)} },
        { data: 'max_temp'},
        { data: 'baseline', render: function(data){return data.toFixed(2)} },
        { data: '_id', target: 1, render: function(id){return '<a href="historic/show/'+id+'">Show</a>'}}
    ],
    "order": [[ 0, "desc" ]],
    dom: 'Bfrtip',
    buttons: [
            'copy', 'csv', 'print'
        ]
  });
}


function formatData(data) {
  total_carbon = {
    name:'(ug) Total Carbon',
    type: 'scatter',
    mode: 'lines+markers',
    line: {shape: 'spline'},
    x:[],
    y:[]
  };
  max_temp = {
    name:'(degC) Max Temperature',
    type: 'scatter',
    yaxis: 'y2',
    mode: 'lines',
    line: {shape: 'hv', color: 'red'},
    x:[],
    y:[]
  };
  baseline = {
    name:'(ppm) Baseline',
    type: 'scatter',
    mode: 'lines',
    line: {shape: 'hv', color: 'grey', dash:'dash'},
    x:[],
    y:[]
  };
  data.rows.forEach(function(datum){
    date = new Date(datum.timestamp);
    total_carbon.x.push(date);
    max_temp.x.push(date);
    baseline.x.push(date);
    Math.round()
    total_carbon.y.push(datum.total_carbon);
    max_temp.y.push(datum.max_temp);
    baseline.y.push(datum.baseline);
  });
  if(data.rows.length == 0){
    return [];
  }
  console.log(total_carbon);
  return [total_carbon, max_temp, baseline]
}
function getData(start, end, callback){
  $.getJSON("historic/data?from="+start+"&to="+end, function(response){
    callback(response);
  });
}



function setDataGraph(data) {
  margin = 50;
  var layout = {
    height: 500,
    margin: {
      // l: 50,
      // r: 50,
      b: 20,
      t: 20,
      // pad: 4
    },
    // title: 'Analysis Data',
    legend: {x: 0,y: 1},
    xaxis: {
        // rangeselector: selectorOptions,
        rangeslider: {},
        hoverformat: "%y.%m.%d %I:%M %p"
    },
    yaxis: {title: 'CO2'},
    yaxis2: {
      title: 'Temperature',
      overlaying: 'y',
      rangemode:'tozero',
      autorange: true,
      side: 'right'
    }
  };

  Plotly.newPlot(graphDiv, data, layout);

  graphDiv.on('plotly_relayout',function(eventdata){
    x_start = eventdata['xaxis.range'][0]
    x_end = eventdata['xaxis.range'][1]
    $('#data_table').DataTable().draw();
  });

}


$.fn.dataTable.ext.search.push(
    function( settings, data, dataIndex ) {
        var time = parseFloat( data[0] ) || 0; // use data for the age column
        if ( ( isNaN( x_start ) && isNaN( x_end ) ) ||
             ( isNaN( x_start ) && time <= x_end ) ||
             ( x_start <= time   && isNaN( x_end ) ) ||
             ( x_start <= time   && time <= x_end ) )
        {
            return true;
        }
        return false;
    }
);




</script>
